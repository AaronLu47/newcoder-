/*
小Q有X首长度为A的不同的歌和Y首长度为B的不同的歌，现在小Q想用这些歌组成一个总长度正好为K的歌单，
每首歌最多只能在歌单中出现一次，在不考虑歌单内歌曲的先后顺序的情况下，请问有多少种组成歌单的方法。
*/

#include<iostream>
#include<stdlib.h>
#include <cmath>
using namespace std;

int main()
{
    int i, j, K, la, lb, na, nb,result;
    cin >> K;
    cin >> la >> na >> lb >> nb;
    if (K <= 0 || la <= 0 || na <= 0 || lb <= 0 || nb <= 0)
    {
        cout << "error!";
        return 0;
    }

    int* lens = new int[na+nb+1];
    for (i = 1; i <= na; i++)
    {
        lens[i] = la;
    }
    for (i = 1; i <= nb; i++)
    {
        lens[i+na] = lb;
    }

    int** dp= new int*[K+1];
    for (i = 0; i < K + 1; i++)
    {
        dp[i] = new int[na + nb + 1];
    }

    for (j = 0; j < na + nb + 1; j++)
    {
        dp[0][j] = 1;
    }

    for (i = 1; i <= K ; i++)
    {
        if (lens[1] != i)
        {
            dp[i][1] = 0;
        }
        else
        {
            dp[i][1] = 1;
        }
    }

    for (i = 1; i <= K; i++)
    {
        for (j = 2; j < na + nb + 1; j++)
        {
            if (i >= lens[j])
            {
                dp[i][j] = (dp[i][j-1]+dp[i-lens[j]][j-1]) % 1000000007;
                //dp[i][j] = (dp[i][j - 1] + dp[i - lens[j]][j - 1]);
            }
            else
            {
                dp[i][j] = dp[i][j - 1] % 1000000007;
            }
        }
    }

    cout << dp[K][na+nb] << endl;
    return 0;
}
